[
    {
        "id": "88d70eed23d2244a",
        "type": "link in",
        "z": "cc2fa3fa50284df3",
        "name": "Get Robot Info",
        "links": [],
        "x": 140,
        "y": 400,
        "wires": [
            [
                "10e5f89be4906d80"
            ]
        ],
        "l": true
    },
    {
        "id": "82edb3154bea08ce",
        "type": "link out",
        "z": "cc2fa3fa50284df3",
        "name": "Get Robot Info",
        "mode": "return",
        "links": [],
        "x": 1320,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "097d32da1bcf1071",
        "type": "json",
        "z": "cc2fa3fa50284df3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "a27857522dc95c9b"
            ]
        ]
    },
    {
        "id": "a4b963e2cc742f41",
        "type": "http request",
        "z": "cc2fa3fa50284df3",
        "name": "Get Robot State",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://ROBOT_IP/api/v2/robot/state",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 400,
        "wires": [
            [
                "097d32da1bcf1071"
            ]
        ]
    },
    {
        "id": "a27857522dc95c9b",
        "type": "function",
        "z": "cc2fa3fa50284df3",
        "name": "Locate Robot Segment & extract States",
        "func": "const mapData = msg.payload.map;\nconst _pixelSize = mapData.pixelSize;\nlet _robotXY = null;\nfor (let i = 0; i < mapData.entities.length; i++) {\n    if (mapData.entities[i].type == \"robot_position\") {\n        _robotXY = {\n            x: Math.floor(mapData.entities[i].points[0] / _pixelSize),\n            y: Math.floor(mapData.entities[i].points[1] / _pixelSize)\n        };\n        break;\n    }\n}\n\n// Test Data\n// _robotXY = {\n//     x: 1000,\n//     y: 1000\n// };\n\nconst _nearestPoint = {\n    x: mapData.size.x,\n    y: mapData.size.y,\n    distance: Math.pow(mapData.size.x,2) + Math.pow(mapData.size.y,2), //Just a placeholder with the biggest distance possible\n    foundRoom:{\n        segmentId: null,\n        name: null\n    }\n}\n\nif (mapData.metaData?.version === 2 && Array.isArray(mapData.layers)) {\n    mapData.layers.forEach(layer => {\n        if (layer.pixels.length === 0 && layer.compressedPixels.length !== 0 && layer.type == \"segment\") {\n            for (let i = 0; i < layer.compressedPixels.length; i = i + 3) {\n                const xStart = layer.compressedPixels[i];\n                const y = layer.compressedPixels[i + 1]\n                const count = layer.compressedPixels[i + 2]\n                for (let j = 0; j < count; j++) {\n                    let x = xStart + j;\n\n                    let _distanceX = x - _robotXY.x;\n                    let _distanceY = y - _robotXY.y;\n                    //const _pointToRobotDistance = Math.sqrt(Math.pow(_distanceX, 2) + Math.pow(_distanceY, 2));\n                    const _pointToRobotDistance = Math.pow(_distanceX, 2) + Math.pow(_distanceY, 2);//sqrt is the \"correct\" trig function, but I only need to compare relative to other points, not exact distance, so I dropped the \"sqrt\" function for efficiancy\n                    if (_nearestPoint.distance > _pointToRobotDistance){\n                        _nearestPoint.distance = _pointToRobotDistance;\n                        _nearestPoint.x = x;\n                        _nearestPoint.y = y;\n                        _nearestPoint.foundRoom= {\n                            segmentId: layer.metaData.segmentId,\n                            name: layer.metaData.name\n                        };\n                    }\n                    if (_nearestPoint.distance==0) {\n                        return;\n                    }\n                }\n            }\n        }\n    })\n}\nconst _robotInfo={};\nmsg.payload.attributes.forEach(attribute => {\n    switch(attribute.__class){\n        case \"StatusStateAttribute\":\n            _robotInfo.state = attribute.value;\n            break;\n        case \"BatteryStateAttribute\":\n            _robotInfo.battery_level = attribute.level;\n            break;\n        case \"ConsumableStateAttribute\":\n            switch (attribute.type){\n                case \"brush\":\n                    if (attribute.subType==\"main\"){\n                        _robotInfo.main_brush_remaining = attribute.remaining;\n                    } else if (attribute.subType == \"side_right\") {\n                        _robotInfo.side_right_brush_remaining = attribute.remaining;\n                    }\n                    break;\n                case \"filter\":\n                    _robotInfo.main_filter_remaining = attribute.remaining;\n                    break;\n                case \"sensor\":\n                    _robotInfo.sensor_cleanup_remaining = attribute.remaining;\n                    break;\n            }\n            break;\n    }\n});\n\n_robotInfo.currentLocation = _nearestPoint.foundRoom;\n_robotInfo._linkSource = msg._linkSource;\nmsg.robot_info = _robotInfo;\nmsg.payload = msg.originalPayload;\nmsg.originalPayload=null;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 400,
        "wires": [
            [
                "82edb3154bea08ce"
            ]
        ]
    },
    {
        "id": "10e5f89be4906d80",
        "type": "function",
        "z": "cc2fa3fa50284df3",
        "name": "save calling flow payload",
        "func": "msg.originalPayload = msg.payload;\nmsg.payload=null;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "a4b963e2cc742f41"
            ]
        ]
    }
]
